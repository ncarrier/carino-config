# directories holding produced files, which can be removed safely
export OUT_DIR=${PWD}/out
export BUILD_DIR=${OUT_DIR}/build
export STAGING_DIR=${OUT_DIR}/staging
export STAGING_HOST_DIR=${OUT_DIR}/staging.host
export FINAL_DIR=${OUT_DIR}/final
export BOOT_DIR=${OUT_DIR}/boot
export U_BOOT_DIR=${OUT_DIR}/u-boot

# source directories
export CONFIG_DIR=${PWD}/config
export PACKAGES_DIR=${PWD}/packages
export BUILD_SCRIPTS_DIR=${PWD}/build_scripts

# set to an empty string to disable ccache for both target and host builds
CCACHE=ccache

# toolchain related information
export TOOLCHAIN_PREFIX=arm-linux-gnueabihf
export LIBC_DIR=/usr/arm-linux-gnueabihf/lib/
CROSS_CC="${CCACHE} ${TOOLCHAIN_PREFIX}-gcc"
CROSS_CXX="${CCACHE} ${TOOLCHAIN_PREFIX}-g++"
CROSS_AS=${TOOLCHAIN_PREFIX}-as
CROSS_PKG_CONFIG_PATH=${STAGING_DIR}/lib/pkgconfig/

# in MB, for sd image. rootfs size will be IMAGE_SIZE - BOOT_PARTITION_SIZE
IMAGE_SIZE=70
BOOT_PARTITION_SIZE=10

# base flags for cross-compilation, passed in CFLAGS to the modules, which must
# then append their own flags
# choose optimisation level by uncommenting the right line
if [ "${CARINO_VERSION_TYPE}" = "release" ]; then
	CROSS_CFLAGS="-Os" # -Os or O2 ?
else
	# debug version
	CROSS_CFLAGS="-O0 -g"
fi
CROSS_CPPFLAGS="-I${STAGING_DIR}/include/"
CROSS_LDFLAGS="-L${STAGING_DIR}/lib/ -Wl,-rpath-link=${STAGING_DIR}/lib"

# base flags for host tools compilation, passed in CFLAGS to the modules, which
# must then append their own flags
# choose optimisation level by uncommenting the right line
HOST_PKG_CONFIG_PATH=${STAGING_HOST_DIR}/lib/pkgconfig
#HOST_CFLAGS="-O0 -g"
HOST_CFLAGS="-O2"
HOST_CPPFLAGS="-I${STAGING_HOST_DIR}/include/"
HOST_LDFLAGS="-L${STAGING_HOST_DIR}/lib/ -Wl,-rpath-link=${STAGING_HOST_DIR}/lib"

# add path to host tools built
export PATH="${STAGING_HOST_DIR}/bin/:${PATH}"
